{"version":3,"sources":["webpack://albis-leasing-sdk/webpack/universalModuleDefinition","webpack://albis-leasing-sdk/webpack/bootstrap","webpack://albis-leasing-sdk/./src/helpers.js","webpack://albis-leasing-sdk/./src/index.js","webpack://albis-leasing-sdk/external {\"commonjs\":\"axios\",\"commonjs2\":\"axios\",\"amd\":\"axios\",\"root\":\"axios\"}","webpack://albis-leasing-sdk/external {\"commonjs\":\"lodash\",\"commonjs2\":\"lodash\",\"amd\":\"lodash\",\"root\":\"_\"}"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACH;;AAEhB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,6CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qDAAqD,IAAI;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ,sCAAsC,EAAE;AAC5E,SAAS,4CAAK;AACd,cAAc,qCAAqC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP;AACA,cAAc,YAAY,GAAG,SAAS;AACtC;AACA;AACA;AACA,cAAc,YAAY,GAAG,SAAS;AACtC;AACA,cAAc,YAAY,GAAG,SAAS;AACtC;AACA,cAAc,YAAY,GAAG,SAAS;AACtC;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACH;AAC6C;AACvB;;AAE7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,yDAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,eAAe,OAAO,GAAG,eAAe;AACxC;AACA;AACA,WAAW,cAAc;AACzB;;AAEA;AACA,qBAAqB,gEAAe;AACpC,WAAW,4CAAK;AAChB;AACA;AACA,mCAAmC,iBAAiB;AACpD,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qGAAqG,KAAK,iBAAiB;AAC1I;;AAEA;AACA;AACA,qBAAqB,gEAAe;;AAEpC,cAAc,0BAA0B,iEAAgB;AACxD,YAAY,4CAAK;AACjB;AACA;AACA,mCAAmC,iBAAiB;AACpD,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,eAAe;AACrB;;AAEA;AACA,qBAAqB,gEAAe;;AAEpC;AACA,cAAc,0BAA0B,iEAAgB;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,gBAAgB;AAChB;AACA,WAAW,4CAAK;AAChB;AACA;AACA,qCAAqC,qCAAqC;AAC1E;AACA,KAAK;AACL;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,eAAe,OAAO;AACtB;AACA;AACA,6BAA6B,eAAe;AAC5C;;AAEA;AACA,qBAAqB,gEAAe;;AAEpC,WAAW,4CAAK;AAChB,gB;AACA;AACA,mCAAmC,iBAAiB;AACpD,OAAO;AACP;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,mCAAmC,eAAe;AAClD;;AAEA;AACA,qBAAqB,gEAAe;;AAEpC;;AAEA;AACA;AACA,MAAM,6CAAC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4CAAK;AAClB;AACA,kB;AACA;AACA,qCAAqC,iBAAiB;AACtD,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,eAAe,OAAO;AACtB;AACA;AACA,oBAAoB,eAAe;AACnC;;AAEA;AACA,qBAAqB,gEAAe;;AAEpC,6BAA6B,4CAAK;AAClC,gB;AACA;AACA,mCAAmC,iBAAiB;AACpD,OAAO;AACP,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK,EAAC;;;;;;;;;;;;AC9VrB,mD;;;;;;;;;;;ACAA,oD","file":"albis-leasing-sdk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"axios\"), require(\"lodash\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"axios\", \"lodash\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"albis-leasing-sdk\"] = factory(require(\"axios\"), require(\"lodash\"));\n\telse\n\t\troot[\"albis-leasing-sdk\"] = factory(root[\"axios\"], root[\"_\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_axios__, __WEBPACK_EXTERNAL_MODULE_lodash__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import axios from 'axios';\nimport _ from 'lodash';\n\nexport async function getToken(\n  APIid,\n  APIsecret,\n  auth0Endpoint,\n  username,\n  password,\n  realm,\n  audience,\n  grantType,\n  nodeEnv\n) {\n  let LocalStorageToken = \"{}\"\n  if (!(typeof window === 'undefined')) {\n    LocalStorageToken = localStorage.getItem('albisToken')\n  }\n  let albisToken = JSON.parse(LocalStorageToken)\n  const date = new Date();\n  if (\n    (_.isEmpty(albisToken) || albisToken.expires < new Date()) &&\n    nodeEnv !== 'test'\n  ) {\n    let token = {};\n    try {\n      token = await login(\n        APIid,\n        APIsecret,\n        auth0Endpoint,\n        username,\n        password,\n        realm,\n        audience,\n        grantType,\n        nodeEnv\n      );\n    } catch (err) {\n      return `Error occured during authentication: ${err}`;\n    }\n    albisToken = {\n      token: token.data.access_token,\n      scope: token.data.scope,\n      token_type: token.data.token_type,\n      expires_in_Auth0: token.data.expires_in,\n      expires: date.setHours(date.getHours() + token.data.expires_in / 3600),\n    };\n    if (!(typeof window === 'undefined')) {\n      localStorage.setItem('albisToken', JSON.stringify(albisToken));\n    }\n    return albisToken;\n  }\n\n  return albisToken;\n}\n\nexport async function login(\n  APIid,\n  APIsecret,\n  auth0Endpoint,\n  username,\n  password,\n  realm,\n  audience,\n  grantType,\n  nodeEnv\n) {\n  if (nodeEnv === 'test')\n    return Promise.resolve({ data: { access_token: 'testAuth0Token12345' } });\n  return axios.post(auth0Endpoint, {\n    headers: { 'content-type': 'application/json' },\n    username,\n    password,\n    realm,\n    client_id: APIid,\n    client_secret: APIsecret,\n    audience,\n    grant_type: grantType,\n  });\n}\n\nexport function getEndpointPath(resource, apiStage, SDKendpoint, nodeEnv) {\n  if (resource === 'ping')\n    return `${SDKendpoint}/${apiStage}/ping`;\n  if (resource === 'rate' && nodeEnv === 'test')\n    return `http://localhost:3000/testModels/rates.json`;\n  if (resource === 'rate')\n    return `${SDKendpoint}/${apiStage}/rate`;\n  if (resource === 'application')\n    return `${SDKendpoint}/${apiStage}/application`;\n  if (resource === 'legalForms')\n    return `${SDKendpoint}/${apiStage}/legal-forms`;\n  return \"Such endpoint doesn't exist\";\n}\n\nexport async function testGetRates(values) {\n  if (isNaN(values.purchasePrice))\n    return Promise.reject('purchasePrice has not a proper type');\n  if (isNaN(values.productGroup))\n    return Promise.reject('productGroup has not a proper type');\n\n  if (isNaN(values.contractType))\n    return Promise.reject('contractType has not a proper type');\n\n  if (isNaN(values.provision))\n    return Promise.reject('provision has not a proper type');\n\n  if (\n    !(\n      typeof values.downPayment === 'number' ||\n      values.downPayment === undefined ||\n      values.downPayment === null\n    )\n  ) {\n    return Promise.reject('downPayment has not a proper type');\n  }\n\n  if (typeof values.paymentMethod !== 'string') {\n    return Promise.reject('paymentMethod has not a proper type');\n  }\n\n  if (values.provision > 5 || values.provision < 0) {\n    return Promise.reject(\n      'Error has occured - provision value exceeds range 0-5',\n    );\n  }\n\n  if (\n    !(\n      values.paymentMethod === 'monthly' || values.paymentMethod === 'quarterly'\n    )\n  ) {\n    return Promise.reject(\n      \"Error has occured - provision option has uncorrect value. Should be 'monthly' or 'quartely'\",\n    );\n  }\n  return true;\n}\n\nexport function mapPaymentOption(paymentOption) {\n  const paymentOptions = {\n    quarterly: 1,\n    monthly: 2\n  };\n  return paymentOptions[paymentOption];\n}\n","import axios from 'axios';\nimport _ from 'lodash';\nimport { getEndpointPath, getToken, testGetRates } from './helpers';\nimport { mapPaymentOption } from './helpers';\n\n// run:\n// jsdoc -d ./public/doc/ src/utils/albis.js to create a documentation for this file\n\n/**\n * An Albis class\n */\n\nclass Albis {\n  /**\n   * Create an Albis object\n   * Note: due to security reasons, keep all sensitive data (i.e. APIid, APIsecret, username, ...)\n   * @param {Object} settings\n   * @param {string=} settings.APIid - API id used for retrieving a valid a token\n   * @param {string=} settings.APIsecret - API secret used for retrieving a valid token\n   * @param {string=} settings.username - shop owner or shop admins username\n   * @param {string=} settings.password - shop owner or shop admin password\n   * @param {string=} settings.realm - shop owner connection name\n   * @param {number=} settings.provision - provision - defines how much commission, retailer wants to receives for each deal. Possible values min: 0, max: 5. Default 0.\n   * @param {string=} settings.auth0Endpoint\n   * @param {string=} settings.SDKendpoint\n   * @param {string=} settings.audience\n   * @param {string=} settings.grantType\n   * @param {boolean} settings.apiStage - defines proper API Gateway enpoints for requests (true - /staging, false - /v1)\n   * @param {string} settings.nodeEnv - defines the environment (development, production, test)\n   *\n   * @example\n   *\n   * new Albis(\n   *  {\n   *    APIid: 'abcde',\n   *    APIsecret: 'asdf',\n   *    username: 'username',\n   *    password: 'password',\n   *    realm: 'shop',\n   *    provision: 3,\n   *    auth0Endpoint: 'https://urlToTokenProvider/token',\n   *    SDKendpoint: 'https://sdkEndpoint',\n   *    audience:'https://urlToTokenProvider/v2',\n   *    grantType: 'https://urlToTokenProvider/password-realm',\n   *    apiStage: staging,\n   *    nodeEnv: 'development'\n   *  })\n   */\n\n  constructor(settings) {\n    this.APIid = settings.APIid;\n    this.APIsecret = settings.APIsecret;\n    this.username = settings.username;\n    this.password = settings.password;\n    this.realm = settings.realm;\n    this.provision = settings.provision;\n    this.auth0Endpoint = settings.auth0Endpoint;\n    this.SDKendpoint = settings.SDKendpoint;\n    this.audience = settings.audience;\n    this.grantType = settings.grantType;\n    this.apiStage = settings.apiStage;\n    this.nodeEnv = settings.nodeEnv\n  }\n\n  /**\n   * getAlbisToken() returns albisToken needed to call other Albis functions\n   * \n   * @returns {Object} albisToken\n   *\n   * @example\n   * getAlbisToken()\n   */\n\n   async getAlbisToken() {\n    const albisToken = await getToken(\n      this.APIid,\n      this.APIsecret,\n      this.auth0Endpoint,\n      this.username,\n      this.password,\n      this.realm,\n      this.audience,\n      this.grantType,\n      this.nodeEnv\n    );\n    return albisToken\n   }\n\n  /**\n   * ping(albisToken) checks the connection with Albis API and shop credentials\n   * \n   * @param {Object} albisToken - object with Albis token, which lets to communicate with Albis API\n   *\n   * @returns {string} \"{result: \"pong\"}\"\n   *\n   * @example\n   * ping({token: '1234'})\n   */\n\n  async ping(albisToken) {\n    const endpoint = getEndpointPath('ping', this.apiStage, this.SDKendpoint, this.nodeEnv);\n    return axios.get(endpoint, {\n      headers: {\n        'content-type': 'application/json',\n        'Authorization': `Bearer ${albisToken.token}`,\n      },\n    });\n  }\n\n  /**\n   * getRates(values, albisToken) retrieves proposed rates. Returned object is needed for proceed getApplication(albisToken)\n   *\n   * @param {Object} values - An object with data for providing rate offers\n   * @param {number} values.purchasePrice - Total net value of the cart [EUR]\n   * @param {number} values.productGroup - Product group of chosen products FOR NOW constant 1    ~~~~~\n   * @param {number=} values.downPayment - Net value of down payment [EUR]. Default 0\n   * @param {number} values.contractType - Contract type FOR NOW contant 1                        ~~~~~\n   * @param {string} values.paymentMethod - Payment options - possible values: 'quarterly' or 'monthly'\n   * @param {Object} albisToken - object with Albis token, which lets to communicate with Albis API\n   *\n   * @returns {Object} An Object with attributes passed to the function and additional attributes:\n   * leaseTerm,\n   * value,\n   * insurance\n   * finalPayment (if there is an opportunity to shrotening the lease term)\n   *\n   * @example\n   *\n   * getRates({ purchasePrice: 5000, productGroup: 1, downPayment: 500, contractType: 1, paymentMethod: 'quarterly'}, , { token: '12345' })\n   */\n\n  async getRates(values, albisToken) {\n    let rates = {};\n    const endpoint = getEndpointPath('rate', this.apiStage, this.SDKendpoint, this.nodeEnv);\n\n    values = {...values, paymentMethod: mapPaymentOption(values.paymentMethod)}\n    rates = axios.get(endpoint, {\n      headers: {\n        'content-type': 'application/json',\n        'Authorization': `Bearer ${albisToken.token}`,\n      },\n      params: {\n        ...values,\n        provision: this.provision,\n      },\n    });\n\n    return rates;\n  }\n\n  /**\n   * saveApplication(values, albisToken) saves an application\n   *\n   * @param {Object} values - An object with values data\n   * @param {string} values.object - Name of the object (80 char max)\n   * @param {number} values.purchasePrice\n   * @param {number} values.downPayment\n   * @param {number} values.leasePayments\n   * @param {number} values.leaseTerm\n   * @param {number} values.leasePaymentsWithInsurance\n   * @param {number} values.finalPayment\n   * @param {Object} values.lessee\n   * @param {string} values.lessee.name\n   * @param {string} values.lessee.street\n   * @param {number} values.lessee.zipCode\n   * @param {string} values.lessee.city\n   * @param {string} values.lessee.phoneNumber\n   * @param {string} values.lessee.email\n   * @param {string} values.lessee.legalForm\n   * @param {number} values.provision\n   * @param {string} values.productGroup\n   * @param {string} values.contractType\n   * @param {string} values.paymentMethod\n   * @param {string} values.iban\n   * @param {boolean} values.ssv\n   * @param {number} values.serviceFee\n   * @param {boolean} values.contractByEmail\n   * @param {Object} albisToken - object with Albis token, which lets to communicate with Albis API\n   *\n   * @returns \"Application has been successufully sent\"\n   *\n   * @example\n   *\n   * saveApplication(\n   *  {\n   *    object: 'Fridge VW',\n   *    purchasePrice: 5000,\n   *    downPayment: null,\n   *    leasePayments: 300,\n   *    leaseTerm: 12,\n   *    leasePaymentsWithInsurance: 23,\n   *    finalPayment: 150,\n   *    lessee: {\n   *      name: 'Antonina',\n   *      street: 'Lichtenrade',\n   *      city: 'Berlin',\n   *      zipCode: 50000,\n   *      phoneNumber: '+48500000000',\n   *      faxNumber: '+48500000000'\n   *      email: 'abc@gmail.com',\n   *      legalForm: 'GmbH'\n   *    },\n   *    provision: 3,\n   *    productGroup: 1,\n   *    contractType: 1,\n   *    paymentMethod: 'quarterly',\n   *    iban: 'DE88100900001234567892',\n   *    ssv: true,\n   *    serviceFee: 300,\n   *    contractByEmail: true\n   * },\n   * {token: '12345'})\n   */\n\n  async saveApplication(values, albisToken) {\n    const endpoint = getEndpointPath('application', this.apiStage, this.SDKendpoint, this.nodeEnv);\n\n    //mapping payment options\n    values = {...values, paymentMethod: mapPaymentOption(values.paymentMethod)}\n\n    //mapping legalForms (from string to number)\n    values = {\n      ...values,\n      lessee: {\n        ...values.lessee,\n        legalForm: await this.mapLegalForm(values.lessee.legalForm, albisToken),\n      },\n    };\n\n    if (values.object.length > 80) {\n      values = {...values, object: values.object.substring(0,77) + \"...\" }\n    }\n    return axios.post(endpoint,\n      {\n        params: {\n        application: JSON.stringify({...values, provision: this.provision}),\n      }\n    }, \n      {\n        headers: {\n        'content-type': 'application/json',\n        'Authorization': `Bearer ${albisToken.token}`,\n       }\n    })\n  }\n\n  /**\n   * findApplication(id, albisToken) finds application by its id\n   * @param {number} id\n   * @param {Object} albisToken - object with Albis token, which lets to communicate with Albis API\n   *\n   * @returns {Object} An object with application data (see saveApplication function parameter)\n   *\n   * @example\n   * findApplication(54321, {token: '12345'})\n   */\n\n  async findApplication(id, albisToken) {\n    const endpoint = getEndpointPath('application', this.apiStage, this.SDKendpoint, this.nodeEnv);\n\n    return axios.get(endpoint, {\n      headers: { \n        'content-type': 'application/json',\n        'Authorization': `Bearer ${albisToken.token}`,\n      },\n      params: {\n        applicationId: id,\n      },\n    });\n  }\n\n  /**\n   * updateApplication(id, leaseTerm, albisToken) - lets to update a particular application - changes lease term and accordingly its value, etc.\n   * @param {number} id\n   * @param {number} leaseTerm\n   * @param {Object} albisToken - object with Albis token, which lets to communicate with Albis API\n   *\n   * @returns \"Application has been successufully sent\"\n   *\n   * @example\n   * updateApplication(54321, 24, {token: '12345'})\n   */\n\n  async updateApplication(id, leaseTerm, albisToken) {\n    const endpoint = getEndpointPath('application', this.apiStage, this.SDKendpoint, this.nodeEnv);\n\n    //check if chosen lease term exist for those values\n\n    const app = await this.findApplication(id);\n    const rates = await this.getRates(\n      _.pick(app.rate, [\n        'purchasePrice',\n        'productGroup',\n        'downPayment',\n        'contractType',\n        'paymentMethod',\n        'provision',\n      ]),\n    );\n    const rate = rates.filter((rate) => rate.leaseTerm === leaseTerm);\n    if (rate) {\n      return axios.put(endpoint, \n      {\n        headers: { \n          'content-type': 'application/json',\n          'Authorization': `Bearer ${albisToken.token}`,\n        },\n      },\n      {\n        params: {\n          applicationId: id,\n          leaseTerm: leaseTerm,\n        },\n      });\n    } else {\n      return new Promise.reject('There is no rate for chosen leaseTerm');\n    }\n  }\n\n    /**\n   * getLegalForms() get a map of all legal forms (needed for lessee data)\n   * \n   * @param {Object} albisToken - object with Albis token, which lets to communicate with Albis API\n   *\n   * @returns {Object} An object with legal forms and their respective IDs\n   *\n   * @example\n   * getLegalForms({token: '12345'})\n   */\n\n  async getLegalForms(albisToken) {\n    const endpoint = getEndpointPath('legalForms', this.apiStage, this.SDKendpoint, this.nodeEnv);\n\n    const legalForms = await axios.get(endpoint, {\n      headers: { \n        'content-type': 'application/json',\n        'Authorization': `Bearer ${albisToken.token}`,\n      },\n    });\n\n    return legalForms.data;\n  }\n\n  async mapLegalForm(name, albisToken) {\n    const list = await(this.getLegalForms(albisToken));\n    let result = list.find(lf => lf.text === name);\n    return result.id || 99;\n  }\n}\n\nexport default Albis;\n","module.exports = __WEBPACK_EXTERNAL_MODULE_axios__;","module.exports = __WEBPACK_EXTERNAL_MODULE_lodash__;"],"sourceRoot":""}